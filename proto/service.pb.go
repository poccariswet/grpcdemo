// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	Book
	Empty
	FetchRequest
	ListAllResponse
	UpdateRequest
	UpdateResponse
	DeleteRequest
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Book struct {
	Id     string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
	Isbn13 string `protobuf:"bytes,4,opt,name=isbn13" json:"isbn13,omitempty"`
	State  bool   `protobuf:"varint,5,opt,name=state" json:"state,omitempty"`
	Pic    string `protobuf:"bytes,6,opt,name=pic" json:"pic,omitempty"`
}

func (m *Book) Reset()                    { *m = Book{} }
func (m *Book) String() string            { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()               {}
func (*Book) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Book) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Book) GetIsbn13() string {
	if m != nil {
		return m.Isbn13
	}
	return ""
}

func (m *Book) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *Book) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FetchRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *FetchRequest) Reset()                    { *m = FetchRequest{} }
func (m *FetchRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRequest) ProtoMessage()               {}
func (*FetchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListAllResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *ListAllResponse) Reset()                    { *m = ListAllResponse{} }
func (m *ListAllResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAllResponse) ProtoMessage()               {}
func (*ListAllResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListAllResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ListAllResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type UpdateRequest struct {
	Book *Book `protobuf:"bytes,1,opt,name=book" json:"book,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateRequest) GetBook() *Book {
	if m != nil {
		return m.Book
	}
	return nil
}

type UpdateResponse struct {
	Book *Book `protobuf:"bytes,1,opt,name=book" json:"book,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateResponse) GetBook() *Book {
	if m != nil {
		return m.Book
	}
	return nil
}

type DeleteRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Book)(nil), "Book")
	proto.RegisterType((*Empty)(nil), "Empty")
	proto.RegisterType((*FetchRequest)(nil), "FetchRequest")
	proto.RegisterType((*ListAllResponse)(nil), "ListAllResponse")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Service service

type ServiceClient interface {
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*Book, error)
	Add(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error)
	ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAllResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*Book, error) {
	out := new(Book)
	err := grpc.Invoke(ctx, "/Service/Fetch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Add(ctx context.Context, in *Book, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/Service/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAllResponse, error) {
	out := new(ListAllResponse)
	err := grpc.Invoke(ctx, "/Service/ListAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/Service/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/Service/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	Fetch(context.Context, *FetchRequest) (*Book, error)
	Add(context.Context, *Book) (*Empty, error)
	ListAll(context.Context, *Empty) (*ListAllResponse, error)
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*Empty, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Fetch(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Add(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Service/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fetch",
			Handler:    _Service_Fetch_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Service_Add_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _Service_ListAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Service_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Service_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x41, 0x4b, 0xf3, 0x40,
	0x14, 0x24, 0x6d, 0xb3, 0xfd, 0xbe, 0xa7, 0x49, 0xcb, 0xa3, 0xc8, 0x1a, 0x50, 0xcb, 0x7a, 0xa9,
	0x0a, 0x0b, 0xb6, 0x07, 0xcf, 0x15, 0xf5, 0xe4, 0x29, 0xe2, 0x0f, 0x68, 0x9b, 0x07, 0x5d, 0x1a,
	0xbb, 0x31, 0xbb, 0x15, 0xbc, 0xfb, 0x83, 0xfc, 0x89, 0x92, 0xdd, 0x04, 0x6d, 0x0e, 0xe2, 0x2d,
	0x33, 0x4c, 0xe6, 0xcd, 0x0c, 0x0b, 0x91, 0xa1, 0xf2, 0x4d, 0xad, 0x48, 0x16, 0xa5, 0xb6, 0x5a,
	0x7c, 0x04, 0xd0, 0xbb, 0xd5, 0x7a, 0x83, 0x31, 0x74, 0x54, 0xc6, 0x83, 0x71, 0x30, 0xf9, 0x9f,
	0x76, 0x54, 0x86, 0x23, 0x08, 0xad, 0xb2, 0x39, 0xf1, 0x8e, 0xa3, 0x3c, 0xc0, 0x23, 0x60, 0x8b,
	0x9d, 0x5d, 0xeb, 0x92, 0x77, 0x1d, 0x5d, 0xa3, 0x8a, 0x57, 0x66, 0xb9, 0xbd, 0x9e, 0xf1, 0x9e,
	0xe7, 0x3d, 0xaa, 0x5c, 0x8c, 0x5d, 0x58, 0xe2, 0xe1, 0x38, 0x98, 0xfc, 0x4b, 0x3d, 0xc0, 0x21,
	0x74, 0x0b, 0xb5, 0xe2, 0xcc, 0x49, 0xab, 0x4f, 0xd1, 0x87, 0xf0, 0xfe, 0xa5, 0xb0, 0xef, 0xe2,
	0x14, 0x0e, 0x1f, 0xc8, 0xae, 0xd6, 0x29, 0xbd, 0xee, 0xc8, 0xd8, 0x76, 0x2c, 0x71, 0x03, 0x83,
	0x47, 0x65, 0xec, 0x3c, 0xcf, 0x53, 0x32, 0x85, 0xde, 0x1a, 0xfa, 0x5b, 0x72, 0x71, 0x09, 0xd1,
	0x73, 0x91, 0x2d, 0x2c, 0x35, 0xce, 0xc7, 0xd0, 0x5b, 0x6a, 0xbd, 0x71, 0x3f, 0x1e, 0x4c, 0x43,
	0x59, 0xad, 0x90, 0x3a, 0x4a, 0x5c, 0x41, 0xdc, 0x68, 0xeb, 0x1b, 0xbf, 0x88, 0xcf, 0x20, 0xba,
	0xa3, 0x9c, 0xbe, 0x8d, 0x5b, 0x79, 0xa6, 0x9f, 0x01, 0xf4, 0x9f, 0xfc, 0xe8, 0x78, 0x02, 0xa1,
	0xab, 0x87, 0x91, 0xfc, 0x59, 0x33, 0xf1, 0x8e, 0x38, 0x82, 0xee, 0x3c, 0xcb, 0xd0, 0xa3, 0x84,
	0x49, 0xb7, 0x09, 0x9e, 0x43, 0xbf, 0xee, 0x8c, 0x35, 0x95, 0x0c, 0x65, 0x7b, 0x85, 0x0b, 0x60,
	0x3e, 0x33, 0xc6, 0x72, 0xaf, 0x68, 0x32, 0x90, 0xad, 0x32, 0x63, 0x60, 0x3e, 0x31, 0xc6, 0x72,
	0x2f, 0x7a, 0x73, 0x71, 0xc9, 0xdc, 0xe3, 0x98, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x35, 0xaa,
	0xd3, 0x8b, 0x2d, 0x02, 0x00, 0x00,
}
